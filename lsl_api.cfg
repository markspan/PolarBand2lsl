[ports]
; This port is used by machines to advertise and request streams.
MulticastPort = 16571

; This is where the range of ports to serve data and service information begins (growing upwards according to the PortRange).
BasePort = 16572

; Ports from the BasePort to BasePort+Portrange-1 are assigned to both TCP data ports (on the even ports, if the BasePort is odd)
; and UDP service ports (on odd ports, if BasePort is even); since these ports are occupied in pairs, there can effectively be
; PortRange/2 stream outlets coexisting on a single machine. A new outlet will occupy a successively higher pair of ports when
; lower ones are occupied. The number of coexistant outlets can be increased by increasing this number. However, note that if
; multicast and broadcast or all UDP transmission are disabled on some router, the peers will need to "manually" scan this range,
; which can be slow on such a network. Also note that, to communicate with external parties, the port range needs to be open in the
; respective firewall configurations.
PortRange = 32

; How to treat IPv6: can be "disable" (then only v4 is used), or "allow" (then both are used side by side) or "force" (then only v6 is used).
IPv6 = allow

[multicast]
; The scope within which one's outlets and inlets are visible to each other. This can be machine (local to the machine),
; link (local to the subnet), site (local to the site as defined by local policy), organization (e.g., campus), or global.
; Always use only the smallest scope that works for your goals. This setting effectively merges the contents of
; MachineAdresses, LinkAddresses, SiteAddresses, OrganizationAddresses, and GlobalAddresses, and sets the packet
; TTL to one of the settings: 0, 1, 24, 32, or 255. If you share streams with remote collaborators, consider using the
; KnownPeers setting under [lab] (thus listing their machines directly, which is more likely to work than internet-scale
; multi-casting). Another possibility is to use the AddressesOverride and TTLOverride settings to avoid pulling in every
; site at intermediate scopes.
ResolveScope = site

; ListenAddress = ""
; IPv6MulticastGroup = 113D:6FDD:2C17:A643:FFE2:1BD1:3CD2

; These are the default address pools for VisibilityScope. The following lists of addresses are merged according
; to the VisibilityScope setting to yield the set of addresses considered for communication.
; Note that making an uninformed/unfortunate address choice can interfere with your site's operations.
MachineAddresses = {FF31:113D:6FDD:2C17:A643:FFE2:1BD1:3CD2}
LinkAddresses = {255.255.255.255, 224.0.0.183, FF02:113D:6FDD:2C17:A643:FFE2:1BD1:3CD2}
SiteAddresses = {239.255.172.215, FF05:113D:6FDD:2C17:A643:FFE2:1BD1:3CD2}
OrganizationAddresses = {} ; old = {239.192.172.215, FF08:113D:6FDD:2C17:A643:FFE2:1BD1:3CD2}
GlobalAddresses = {}

; This allows you to override the addresses calculated by VisibilityScope. To communicate conveniently wth a remote party without negotiating
; the involved hostnames, you may choose a privately agreed-on multicast address of the appropriate scope here.
AddressesOverride = {}

; This setting allows you to override the packet time-to-live setting. If you intend to use multicast with a custom address to conveniently
; communicate with a specific remote party, you may set this to a sufficiently high level (255 for international collaboration).
TTLOverride = -1

[lab]
; This setting mainly serves as a fallback in case that your network configuration does not permit multicast/broadcast communciation.
; By listing the names or IP addresses of your lab's machines here (both stream providers and stream users) and make the file available
; on all involved machines, you can bypass the need for multicasting. This setting can also be used to link a small collection of machines
; across the internet, provided that the firewall settings of each party permit communication (forward the BasePort to BasePort+PortRange ports).
KnownPeers = {}

; This is the default "vanilla" session id; modify it to logically isolate your recording acitities from others within the scope.
; The session id should not be relied on as a "password" to hide one's data from unpriviledged users; use operating-system and
; network settings for this purpose. Note that you machine still gets to see some traffic from other activities if within the scope.
SessionID = default

[tuning]
; This setting offers fine control over various intervals and constants in LSL.
; We apologize that there is not more documentation for these settings at this time.
; Brief descriptions can be found in https://github.com/sccn/liblsl/blob/master/src/api_config.h#L149-L200
; UseProtocolVersion = not set, read from common.h.
WatchdogCheckInterval = 15.0
WatchdogTimeThreshold = 15.0
MulticastMinRTT = 0.5
MulticastMaxRTT = 3.0
UnicastMinRTT = 0.75
UnicastMaxRTT = 5.0
ContinuousResolveInterval = 0.5
TimerResolution = 1
MaxCachedQueries = 100
TimeUpdateInterval = 2.0
TimeUpdateMinProbes = 6
TimeProbeCount = 8
TimeProbeInterval = 0.064
TimeProbeMaxRTT = 0.128
OutletBufferReserveMs = 5000
OutletBufferReserveSamples = 128
SendSocketBufferSize = 0
InletBufferReserveMs = 5000
InletBufferReserveSamples = 128
ReceiveSocketBufferSize = 0
SmoothingHalftime = 90.0
ForceDefaultTimestamps = false

[log]
; the log level. Only messages at this level or below will be logged
; -2: errors
; -1: warnings
; 0: information
; 1-9: increasingly less important details
; When liblsl is built with LSL_DEBUGLOG=On, the levels 1-9 will log more details
; The log looks like this:
; Date and time          |  runtime  |  thread ID        | source location        | level | Log message
; 2020-11-11 08:54:08.696 (   3.132s) [        A5247740]   inlet_connection.cpp:46    WARN| The stream named 'timesync' can't be recovered automatically if its provider crashes because it doesn't have a unique source ID
level = -3
; liblsl can also write all log messages to a file specified here. By default, log messages will be appended
file = test.out